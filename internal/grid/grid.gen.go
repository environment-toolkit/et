// Package grid provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package grid

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	AuthScopes = "auth.Scopes"
)

// Defines values for ModelsEnvironmentState.
const (
	ModelsEnvironmentStateCreated  ModelsEnvironmentState = "created"
	ModelsEnvironmentStateCreating ModelsEnvironmentState = "creating"
	ModelsEnvironmentStateDeleted  ModelsEnvironmentState = "deleted"
	ModelsEnvironmentStateDeleting ModelsEnvironmentState = "deleting"
	ModelsEnvironmentStateFailed   ModelsEnvironmentState = "failed"
	ModelsEnvironmentStateNew      ModelsEnvironmentState = "new"
	ModelsEnvironmentStateUpdated  ModelsEnvironmentState = "updated"
	ModelsEnvironmentStateUpdating ModelsEnvironmentState = "updating"
)

// Defines values for ModelsSpecState.
const (
	ModelsSpecStateCreated  ModelsSpecState = "created"
	ModelsSpecStateCreating ModelsSpecState = "creating"
	ModelsSpecStateDeleted  ModelsSpecState = "deleted"
	ModelsSpecStateDeleting ModelsSpecState = "deleting"
	ModelsSpecStateFailed   ModelsSpecState = "failed"
	ModelsSpecStateNew      ModelsSpecState = "new"
	ModelsSpecStateUpdated  ModelsSpecState = "updated"
	ModelsSpecStateUpdating ModelsSpecState = "updating"
)

// AggregatesEnvironment defines model for AggregatesEnvironment.
type AggregatesEnvironment struct {
	CreatedAt time.Time              `json:"created_at"`
	DeletedAt *time.Time             `json:"deleted_at"`
	Id        openapi_types.UUID     `json:"id"`
	Name      string                 `json:"name"`
	Namespace string                 `json:"namespace"`
	State     ModelsEnvironmentState `json:"state"`
	SyncedAt  *time.Time             `json:"synced_at"`
	Title     string                 `json:"title"`
	UpdatedAt *time.Time             `json:"updated_at"`
	Version   *int                   `json:"version,omitempty"`
}

// AggregatesSpec defines model for AggregatesSpec.
type AggregatesSpec struct {
	Content   string             `json:"content"`
	CreatedAt time.Time          `json:"created_at"`
	DeletedAt *time.Time         `json:"deleted_at"`
	Id        openapi_types.UUID `json:"id"`
	Name      string             `json:"name"`
	Namespace string             `json:"namespace"`
	State     ModelsSpecState    `json:"state"`
	SyncedAt  *time.Time         `json:"synced_at"`
	UpdatedAt *time.Time         `json:"updated_at"`
	Variables *map[string]string `json:"variables"`
	Version   *int               `json:"version,omitempty"`
}

// CommandsDeleteEnvironment defines model for CommandsDeleteEnvironment.
type CommandsDeleteEnvironment struct {
	AggregateId openapi_types.UUID `json:"aggregate_id"`
	Namespace   string             `json:"namespace"`
}

// CommandsDeleteSpec defines model for CommandsDeleteSpec.
type CommandsDeleteSpec struct {
	AggregateId openapi_types.UUID `json:"aggregate_id"`
	Namespace   string             `json:"namespace"`
}

// CommandsNewEnvironment defines model for CommandsNewEnvironment.
type CommandsNewEnvironment struct {
	AggregateId openapi_types.UUID `json:"aggregate_id"`
	Name        string             `json:"name"`
	Namespace   string             `json:"namespace"`
	Title       string             `json:"title"`
}

// CommandsNewSpec defines model for CommandsNewSpec.
type CommandsNewSpec struct {
	AggregateId openapi_types.UUID `json:"aggregate_id"`
	Data        string             `json:"data"`
	Namespace   string             `json:"namespace"`
	Variables   *map[string]string `json:"variables"`
}

// ModelsEnvironmentState defines model for ModelsEnvironmentState.
type ModelsEnvironmentState string

// ModelsSpecState defines model for ModelsSpecState.
type ModelsSpecState string

// RestErrResponse defines model for RestErrResponse.
type RestErrResponse struct {
	// Code Application-specific error code.
	Code *int `json:"code,omitempty"`

	// Context Application context.
	Context *map[string]interface{} `json:"context,omitempty"`

	// Error Error message.
	Error *string `json:"error,omitempty"`

	// Status Status text.
	Status *string `json:"status,omitempty"`
}

// XesPaginationGithubComEnvironmentToolkitGridDataAggregatesEnvironment defines model for XesPaginationGithubComEnvironmentToolkitGridDataAggregatesEnvironment.
type XesPaginationGithubComEnvironmentToolkitGridDataAggregatesEnvironment struct {
	Items      []AggregatesEnvironment `json:"items"`
	Page       int                     `json:"page"`
	PageSize   int                     `json:"page_size"`
	TotalItems int                     `json:"total_items"`
	TotalPages int                     `json:"total_pages"`
}

// XesPaginationGithubComEnvironmentToolkitGridDataAggregatesSpec defines model for XesPaginationGithubComEnvironmentToolkitGridDataAggregatesSpec.
type XesPaginationGithubComEnvironmentToolkitGridDataAggregatesSpec struct {
	Items      []AggregatesSpec `json:"items"`
	Page       int              `json:"page"`
	PageSize   int              `json:"page_size"`
	TotalItems int              `json:"total_items"`
	TotalPages int              `json:"total_pages"`
}

// XesReplayAllInput defines model for XesReplayAllInput.
type XesReplayAllInput struct {
	Namespace string `json:"namespace"`
}

// XesReplayAllOutput defines model for XesReplayAllOutput.
type XesReplayAllOutput struct {
	TotalCommands *int `json:"total_commands,omitempty"`
}

// XesReturn defines model for XesReturn.
type XesReturn struct {
	Id openapi_types.UUID `json:"id"`
}

// PagingEnvironmentParams defines parameters for PagingEnvironment.
type PagingEnvironmentParams struct {
	Page       *int                      `form:"page,omitempty" json:"page,omitempty"`
	PageSize   *int                      `form:"page_size,omitempty" json:"page_size,omitempty"`
	Order      *[]string                 `form:"order,omitempty" json:"order,omitempty"`
	Ids        *[]openapi_types.UUID     `form:"ids,omitempty" json:"ids,omitempty"`
	States     *[]ModelsEnvironmentState `form:"states,omitempty" json:"states,omitempty"`
	Names      *[]string                 `form:"names,omitempty" json:"names,omitempty"`
	XNamespace string                    `json:"X-Namespace"`
}

// GetEnvironmentParams defines parameters for GetEnvironment.
type GetEnvironmentParams struct {
	XNamespace string `json:"X-Namespace"`
}

// PagingSpecParams defines parameters for PagingSpec.
type PagingSpecParams struct {
	Page       *int                  `form:"page,omitempty" json:"page,omitempty"`
	PageSize   *int                  `form:"page_size,omitempty" json:"page_size,omitempty"`
	Order      *[]string             `form:"order,omitempty" json:"order,omitempty"`
	Ids        *[]openapi_types.UUID `form:"ids,omitempty" json:"ids,omitempty"`
	States     *[]ModelsSpecState    `form:"states,omitempty" json:"states,omitempty"`
	Names      *[]string             `form:"names,omitempty" json:"names,omitempty"`
	XNamespace string                `json:"X-Namespace"`
}

// GetSpecParams defines parameters for GetSpec.
type GetSpecParams struct {
	XNamespace string `json:"X-Namespace"`
}

// CommandNewEnvironmentJSONRequestBody defines body for CommandNewEnvironment for application/json ContentType.
type CommandNewEnvironmentJSONRequestBody = CommandsNewEnvironment

// CommandDeleteEnvironmentJSONRequestBody defines body for CommandDeleteEnvironment for application/json ContentType.
type CommandDeleteEnvironmentJSONRequestBody = CommandsDeleteEnvironment

// ReplayAllConfigJSONRequestBody defines body for ReplayAllConfig for application/json ContentType.
type ReplayAllConfigJSONRequestBody = XesReplayAllInput

// ReplayAllDeploymentJSONRequestBody defines body for ReplayAllDeployment for application/json ContentType.
type ReplayAllDeploymentJSONRequestBody = XesReplayAllInput

// ReplayAllDeploymentRevisionJSONRequestBody defines body for ReplayAllDeploymentRevision for application/json ContentType.
type ReplayAllDeploymentRevisionJSONRequestBody = XesReplayAllInput

// CommandNewSpecJSONRequestBody defines body for CommandNewSpec for application/json ContentType.
type CommandNewSpecJSONRequestBody = CommandsNewSpec

// CommandDeleteSpecJSONRequestBody defines body for CommandDeleteSpec for application/json ContentType.
type CommandDeleteSpecJSONRequestBody = CommandsDeleteSpec

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PagingEnvironment request
	PagingEnvironment(ctx context.Context, params *PagingEnvironmentParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommandNewEnvironmentWithBody request with any body
	CommandNewEnvironmentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CommandNewEnvironment(ctx context.Context, body CommandNewEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommandDeleteEnvironmentWithBody request with any body
	CommandDeleteEnvironmentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CommandDeleteEnvironment(ctx context.Context, body CommandDeleteEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEnvironment request
	GetEnvironment(ctx context.Context, id openapi_types.UUID, params *GetEnvironmentParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplayAllConfigWithBody request with any body
	ReplayAllConfigWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplayAllConfig(ctx context.Context, body ReplayAllConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplayAllDeploymentWithBody request with any body
	ReplayAllDeploymentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplayAllDeployment(ctx context.Context, body ReplayAllDeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplayAllDeploymentRevisionWithBody request with any body
	ReplayAllDeploymentRevisionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplayAllDeploymentRevision(ctx context.Context, body ReplayAllDeploymentRevisionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PagingSpec request
	PagingSpec(ctx context.Context, params *PagingSpecParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommandNewSpecWithBody request with any body
	CommandNewSpecWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CommandNewSpec(ctx context.Context, body CommandNewSpecJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommandDeleteSpecWithBody request with any body
	CommandDeleteSpecWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CommandDeleteSpec(ctx context.Context, body CommandDeleteSpecJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSpec request
	GetSpec(ctx context.Context, id openapi_types.UUID, params *GetSpecParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PagingEnvironment(ctx context.Context, params *PagingEnvironmentParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPagingEnvironmentRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommandNewEnvironmentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommandNewEnvironmentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommandNewEnvironment(ctx context.Context, body CommandNewEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommandNewEnvironmentRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommandDeleteEnvironmentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommandDeleteEnvironmentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommandDeleteEnvironment(ctx context.Context, body CommandDeleteEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommandDeleteEnvironmentRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEnvironment(ctx context.Context, id openapi_types.UUID, params *GetEnvironmentParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEnvironmentRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplayAllConfigWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplayAllConfigRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplayAllConfig(ctx context.Context, body ReplayAllConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplayAllConfigRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplayAllDeploymentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplayAllDeploymentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplayAllDeployment(ctx context.Context, body ReplayAllDeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplayAllDeploymentRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplayAllDeploymentRevisionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplayAllDeploymentRevisionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplayAllDeploymentRevision(ctx context.Context, body ReplayAllDeploymentRevisionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplayAllDeploymentRevisionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PagingSpec(ctx context.Context, params *PagingSpecParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPagingSpecRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommandNewSpecWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommandNewSpecRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommandNewSpec(ctx context.Context, body CommandNewSpecJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommandNewSpecRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommandDeleteSpecWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommandDeleteSpecRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommandDeleteSpec(ctx context.Context, body CommandDeleteSpecJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommandDeleteSpecRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSpec(ctx context.Context, id openapi_types.UUID, params *GetSpecParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSpecRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPagingEnvironmentRequest generates requests for PagingEnvironment
func NewPagingEnvironmentRequest(server string, params *PagingEnvironmentParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/environments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ids", runtime.ParamLocationQuery, *params.Ids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.States != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "states", runtime.ParamLocationQuery, *params.States); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Names != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "names", runtime.ParamLocationQuery, *params.Names); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Namespace", runtime.ParamLocationHeader, params.XNamespace)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Namespace", headerParam0)

	}

	return req, nil
}

// NewCommandNewEnvironmentRequest calls the generic CommandNewEnvironment builder with application/json body
func NewCommandNewEnvironmentRequest(server string, body CommandNewEnvironmentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCommandNewEnvironmentRequestWithBody(server, "application/json", bodyReader)
}

// NewCommandNewEnvironmentRequestWithBody generates requests for CommandNewEnvironment with any type of body
func NewCommandNewEnvironmentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/environments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCommandDeleteEnvironmentRequest calls the generic CommandDeleteEnvironment builder with application/json body
func NewCommandDeleteEnvironmentRequest(server string, body CommandDeleteEnvironmentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCommandDeleteEnvironmentRequestWithBody(server, "application/json", bodyReader)
}

// NewCommandDeleteEnvironmentRequestWithBody generates requests for CommandDeleteEnvironment with any type of body
func NewCommandDeleteEnvironmentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/environments/delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetEnvironmentRequest generates requests for GetEnvironment
func NewGetEnvironmentRequest(server string, id openapi_types.UUID, params *GetEnvironmentParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/environments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Namespace", runtime.ParamLocationHeader, params.XNamespace)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Namespace", headerParam0)

	}

	return req, nil
}

// NewReplayAllConfigRequest calls the generic ReplayAllConfig builder with application/json body
func NewReplayAllConfigRequest(server string, body ReplayAllConfigJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplayAllConfigRequestWithBody(server, "application/json", bodyReader)
}

// NewReplayAllConfigRequestWithBody generates requests for ReplayAllConfig with any type of body
func NewReplayAllConfigRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/replay/config")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReplayAllDeploymentRequest calls the generic ReplayAllDeployment builder with application/json body
func NewReplayAllDeploymentRequest(server string, body ReplayAllDeploymentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplayAllDeploymentRequestWithBody(server, "application/json", bodyReader)
}

// NewReplayAllDeploymentRequestWithBody generates requests for ReplayAllDeployment with any type of body
func NewReplayAllDeploymentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/replay/deployment")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReplayAllDeploymentRevisionRequest calls the generic ReplayAllDeploymentRevision builder with application/json body
func NewReplayAllDeploymentRevisionRequest(server string, body ReplayAllDeploymentRevisionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplayAllDeploymentRevisionRequestWithBody(server, "application/json", bodyReader)
}

// NewReplayAllDeploymentRevisionRequestWithBody generates requests for ReplayAllDeploymentRevision with any type of body
func NewReplayAllDeploymentRevisionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/replay/deploymentrevision")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPagingSpecRequest generates requests for PagingSpec
func NewPagingSpecRequest(server string, params *PagingSpecParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/specs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ids", runtime.ParamLocationQuery, *params.Ids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.States != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "states", runtime.ParamLocationQuery, *params.States); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Names != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "names", runtime.ParamLocationQuery, *params.Names); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Namespace", runtime.ParamLocationHeader, params.XNamespace)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Namespace", headerParam0)

	}

	return req, nil
}

// NewCommandNewSpecRequest calls the generic CommandNewSpec builder with application/json body
func NewCommandNewSpecRequest(server string, body CommandNewSpecJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCommandNewSpecRequestWithBody(server, "application/json", bodyReader)
}

// NewCommandNewSpecRequestWithBody generates requests for CommandNewSpec with any type of body
func NewCommandNewSpecRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/specs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCommandDeleteSpecRequest calls the generic CommandDeleteSpec builder with application/json body
func NewCommandDeleteSpecRequest(server string, body CommandDeleteSpecJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCommandDeleteSpecRequestWithBody(server, "application/json", bodyReader)
}

// NewCommandDeleteSpecRequestWithBody generates requests for CommandDeleteSpec with any type of body
func NewCommandDeleteSpecRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/specs/delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSpecRequest generates requests for GetSpec
func NewGetSpecRequest(server string, id openapi_types.UUID, params *GetSpecParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/specs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Namespace", runtime.ParamLocationHeader, params.XNamespace)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Namespace", headerParam0)

	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PagingEnvironmentWithResponse request
	PagingEnvironmentWithResponse(ctx context.Context, params *PagingEnvironmentParams, reqEditors ...RequestEditorFn) (*PagingEnvironmentResponse, error)

	// CommandNewEnvironmentWithBodyWithResponse request with any body
	CommandNewEnvironmentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CommandNewEnvironmentResponse, error)

	CommandNewEnvironmentWithResponse(ctx context.Context, body CommandNewEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*CommandNewEnvironmentResponse, error)

	// CommandDeleteEnvironmentWithBodyWithResponse request with any body
	CommandDeleteEnvironmentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CommandDeleteEnvironmentResponse, error)

	CommandDeleteEnvironmentWithResponse(ctx context.Context, body CommandDeleteEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*CommandDeleteEnvironmentResponse, error)

	// GetEnvironmentWithResponse request
	GetEnvironmentWithResponse(ctx context.Context, id openapi_types.UUID, params *GetEnvironmentParams, reqEditors ...RequestEditorFn) (*GetEnvironmentResponse, error)

	// ReplayAllConfigWithBodyWithResponse request with any body
	ReplayAllConfigWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplayAllConfigResponse, error)

	ReplayAllConfigWithResponse(ctx context.Context, body ReplayAllConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplayAllConfigResponse, error)

	// ReplayAllDeploymentWithBodyWithResponse request with any body
	ReplayAllDeploymentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplayAllDeploymentResponse, error)

	ReplayAllDeploymentWithResponse(ctx context.Context, body ReplayAllDeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplayAllDeploymentResponse, error)

	// ReplayAllDeploymentRevisionWithBodyWithResponse request with any body
	ReplayAllDeploymentRevisionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplayAllDeploymentRevisionResponse, error)

	ReplayAllDeploymentRevisionWithResponse(ctx context.Context, body ReplayAllDeploymentRevisionJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplayAllDeploymentRevisionResponse, error)

	// PagingSpecWithResponse request
	PagingSpecWithResponse(ctx context.Context, params *PagingSpecParams, reqEditors ...RequestEditorFn) (*PagingSpecResponse, error)

	// CommandNewSpecWithBodyWithResponse request with any body
	CommandNewSpecWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CommandNewSpecResponse, error)

	CommandNewSpecWithResponse(ctx context.Context, body CommandNewSpecJSONRequestBody, reqEditors ...RequestEditorFn) (*CommandNewSpecResponse, error)

	// CommandDeleteSpecWithBodyWithResponse request with any body
	CommandDeleteSpecWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CommandDeleteSpecResponse, error)

	CommandDeleteSpecWithResponse(ctx context.Context, body CommandDeleteSpecJSONRequestBody, reqEditors ...RequestEditorFn) (*CommandDeleteSpecResponse, error)

	// GetSpecWithResponse request
	GetSpecWithResponse(ctx context.Context, id openapi_types.UUID, params *GetSpecParams, reqEditors ...RequestEditorFn) (*GetSpecResponse, error)
}

type PagingEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *XesPaginationGithubComEnvironmentToolkitGridDataAggregatesEnvironment
	JSON401      *RestErrResponse
	JSON404      *RestErrResponse
}

// Status returns HTTPResponse.Status
func (r PagingEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PagingEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CommandNewEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *XesReturn
	JSON400      *RestErrResponse
	JSON401      *RestErrResponse
}

// Status returns HTTPResponse.Status
func (r CommandNewEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommandNewEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CommandDeleteEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *XesReturn
	JSON400      *RestErrResponse
	JSON401      *RestErrResponse
}

// Status returns HTTPResponse.Status
func (r CommandDeleteEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommandDeleteEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AggregatesEnvironment
	JSON401      *RestErrResponse
	JSON404      *RestErrResponse
}

// Status returns HTTPResponse.Status
func (r GetEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplayAllConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *XesReplayAllOutput
	JSON400      *RestErrResponse
}

// Status returns HTTPResponse.Status
func (r ReplayAllConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplayAllConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplayAllDeploymentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *XesReplayAllOutput
	JSON400      *RestErrResponse
}

// Status returns HTTPResponse.Status
func (r ReplayAllDeploymentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplayAllDeploymentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplayAllDeploymentRevisionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *XesReplayAllOutput
	JSON400      *RestErrResponse
}

// Status returns HTTPResponse.Status
func (r ReplayAllDeploymentRevisionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplayAllDeploymentRevisionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PagingSpecResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *XesPaginationGithubComEnvironmentToolkitGridDataAggregatesSpec
	JSON401      *RestErrResponse
	JSON404      *RestErrResponse
}

// Status returns HTTPResponse.Status
func (r PagingSpecResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PagingSpecResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CommandNewSpecResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *XesReturn
	JSON400      *RestErrResponse
	JSON401      *RestErrResponse
}

// Status returns HTTPResponse.Status
func (r CommandNewSpecResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommandNewSpecResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CommandDeleteSpecResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *XesReturn
	JSON400      *RestErrResponse
	JSON401      *RestErrResponse
}

// Status returns HTTPResponse.Status
func (r CommandDeleteSpecResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommandDeleteSpecResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSpecResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AggregatesSpec
	JSON401      *RestErrResponse
	JSON404      *RestErrResponse
}

// Status returns HTTPResponse.Status
func (r GetSpecResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSpecResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PagingEnvironmentWithResponse request returning *PagingEnvironmentResponse
func (c *ClientWithResponses) PagingEnvironmentWithResponse(ctx context.Context, params *PagingEnvironmentParams, reqEditors ...RequestEditorFn) (*PagingEnvironmentResponse, error) {
	rsp, err := c.PagingEnvironment(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePagingEnvironmentResponse(rsp)
}

// CommandNewEnvironmentWithBodyWithResponse request with arbitrary body returning *CommandNewEnvironmentResponse
func (c *ClientWithResponses) CommandNewEnvironmentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CommandNewEnvironmentResponse, error) {
	rsp, err := c.CommandNewEnvironmentWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommandNewEnvironmentResponse(rsp)
}

func (c *ClientWithResponses) CommandNewEnvironmentWithResponse(ctx context.Context, body CommandNewEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*CommandNewEnvironmentResponse, error) {
	rsp, err := c.CommandNewEnvironment(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommandNewEnvironmentResponse(rsp)
}

// CommandDeleteEnvironmentWithBodyWithResponse request with arbitrary body returning *CommandDeleteEnvironmentResponse
func (c *ClientWithResponses) CommandDeleteEnvironmentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CommandDeleteEnvironmentResponse, error) {
	rsp, err := c.CommandDeleteEnvironmentWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommandDeleteEnvironmentResponse(rsp)
}

func (c *ClientWithResponses) CommandDeleteEnvironmentWithResponse(ctx context.Context, body CommandDeleteEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*CommandDeleteEnvironmentResponse, error) {
	rsp, err := c.CommandDeleteEnvironment(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommandDeleteEnvironmentResponse(rsp)
}

// GetEnvironmentWithResponse request returning *GetEnvironmentResponse
func (c *ClientWithResponses) GetEnvironmentWithResponse(ctx context.Context, id openapi_types.UUID, params *GetEnvironmentParams, reqEditors ...RequestEditorFn) (*GetEnvironmentResponse, error) {
	rsp, err := c.GetEnvironment(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEnvironmentResponse(rsp)
}

// ReplayAllConfigWithBodyWithResponse request with arbitrary body returning *ReplayAllConfigResponse
func (c *ClientWithResponses) ReplayAllConfigWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplayAllConfigResponse, error) {
	rsp, err := c.ReplayAllConfigWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplayAllConfigResponse(rsp)
}

func (c *ClientWithResponses) ReplayAllConfigWithResponse(ctx context.Context, body ReplayAllConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplayAllConfigResponse, error) {
	rsp, err := c.ReplayAllConfig(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplayAllConfigResponse(rsp)
}

// ReplayAllDeploymentWithBodyWithResponse request with arbitrary body returning *ReplayAllDeploymentResponse
func (c *ClientWithResponses) ReplayAllDeploymentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplayAllDeploymentResponse, error) {
	rsp, err := c.ReplayAllDeploymentWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplayAllDeploymentResponse(rsp)
}

func (c *ClientWithResponses) ReplayAllDeploymentWithResponse(ctx context.Context, body ReplayAllDeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplayAllDeploymentResponse, error) {
	rsp, err := c.ReplayAllDeployment(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplayAllDeploymentResponse(rsp)
}

// ReplayAllDeploymentRevisionWithBodyWithResponse request with arbitrary body returning *ReplayAllDeploymentRevisionResponse
func (c *ClientWithResponses) ReplayAllDeploymentRevisionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplayAllDeploymentRevisionResponse, error) {
	rsp, err := c.ReplayAllDeploymentRevisionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplayAllDeploymentRevisionResponse(rsp)
}

func (c *ClientWithResponses) ReplayAllDeploymentRevisionWithResponse(ctx context.Context, body ReplayAllDeploymentRevisionJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplayAllDeploymentRevisionResponse, error) {
	rsp, err := c.ReplayAllDeploymentRevision(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplayAllDeploymentRevisionResponse(rsp)
}

// PagingSpecWithResponse request returning *PagingSpecResponse
func (c *ClientWithResponses) PagingSpecWithResponse(ctx context.Context, params *PagingSpecParams, reqEditors ...RequestEditorFn) (*PagingSpecResponse, error) {
	rsp, err := c.PagingSpec(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePagingSpecResponse(rsp)
}

// CommandNewSpecWithBodyWithResponse request with arbitrary body returning *CommandNewSpecResponse
func (c *ClientWithResponses) CommandNewSpecWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CommandNewSpecResponse, error) {
	rsp, err := c.CommandNewSpecWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommandNewSpecResponse(rsp)
}

func (c *ClientWithResponses) CommandNewSpecWithResponse(ctx context.Context, body CommandNewSpecJSONRequestBody, reqEditors ...RequestEditorFn) (*CommandNewSpecResponse, error) {
	rsp, err := c.CommandNewSpec(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommandNewSpecResponse(rsp)
}

// CommandDeleteSpecWithBodyWithResponse request with arbitrary body returning *CommandDeleteSpecResponse
func (c *ClientWithResponses) CommandDeleteSpecWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CommandDeleteSpecResponse, error) {
	rsp, err := c.CommandDeleteSpecWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommandDeleteSpecResponse(rsp)
}

func (c *ClientWithResponses) CommandDeleteSpecWithResponse(ctx context.Context, body CommandDeleteSpecJSONRequestBody, reqEditors ...RequestEditorFn) (*CommandDeleteSpecResponse, error) {
	rsp, err := c.CommandDeleteSpec(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommandDeleteSpecResponse(rsp)
}

// GetSpecWithResponse request returning *GetSpecResponse
func (c *ClientWithResponses) GetSpecWithResponse(ctx context.Context, id openapi_types.UUID, params *GetSpecParams, reqEditors ...RequestEditorFn) (*GetSpecResponse, error) {
	rsp, err := c.GetSpec(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSpecResponse(rsp)
}

// ParsePagingEnvironmentResponse parses an HTTP response from a PagingEnvironmentWithResponse call
func ParsePagingEnvironmentResponse(rsp *http.Response) (*PagingEnvironmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PagingEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest XesPaginationGithubComEnvironmentToolkitGridDataAggregatesEnvironment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RestErrResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest RestErrResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCommandNewEnvironmentResponse parses an HTTP response from a CommandNewEnvironmentWithResponse call
func ParseCommandNewEnvironmentResponse(rsp *http.Response) (*CommandNewEnvironmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CommandNewEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest XesReturn
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RestErrResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RestErrResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseCommandDeleteEnvironmentResponse parses an HTTP response from a CommandDeleteEnvironmentWithResponse call
func ParseCommandDeleteEnvironmentResponse(rsp *http.Response) (*CommandDeleteEnvironmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CommandDeleteEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest XesReturn
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RestErrResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RestErrResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetEnvironmentResponse parses an HTTP response from a GetEnvironmentWithResponse call
func ParseGetEnvironmentResponse(rsp *http.Response) (*GetEnvironmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AggregatesEnvironment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RestErrResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest RestErrResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseReplayAllConfigResponse parses an HTTP response from a ReplayAllConfigWithResponse call
func ParseReplayAllConfigResponse(rsp *http.Response) (*ReplayAllConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplayAllConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest XesReplayAllOutput
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RestErrResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseReplayAllDeploymentResponse parses an HTTP response from a ReplayAllDeploymentWithResponse call
func ParseReplayAllDeploymentResponse(rsp *http.Response) (*ReplayAllDeploymentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplayAllDeploymentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest XesReplayAllOutput
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RestErrResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseReplayAllDeploymentRevisionResponse parses an HTTP response from a ReplayAllDeploymentRevisionWithResponse call
func ParseReplayAllDeploymentRevisionResponse(rsp *http.Response) (*ReplayAllDeploymentRevisionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplayAllDeploymentRevisionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest XesReplayAllOutput
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RestErrResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePagingSpecResponse parses an HTTP response from a PagingSpecWithResponse call
func ParsePagingSpecResponse(rsp *http.Response) (*PagingSpecResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PagingSpecResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest XesPaginationGithubComEnvironmentToolkitGridDataAggregatesSpec
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RestErrResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest RestErrResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCommandNewSpecResponse parses an HTTP response from a CommandNewSpecWithResponse call
func ParseCommandNewSpecResponse(rsp *http.Response) (*CommandNewSpecResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CommandNewSpecResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest XesReturn
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RestErrResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RestErrResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseCommandDeleteSpecResponse parses an HTTP response from a CommandDeleteSpecWithResponse call
func ParseCommandDeleteSpecResponse(rsp *http.Response) (*CommandDeleteSpecResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CommandDeleteSpecResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest XesReturn
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RestErrResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RestErrResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetSpecResponse parses an HTTP response from a GetSpecWithResponse call
func ParseGetSpecResponse(rsp *http.Response) (*GetSpecResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSpecResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AggregatesSpec
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RestErrResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest RestErrResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}
